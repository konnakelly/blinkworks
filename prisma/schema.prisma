// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core platform models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  brand         Brand?
  tasks         Task[]
  comments      Comment[]
  notifications Notification[]

  @@map("users")
}

model Brand {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  logo        String?
  industry    String?
  size        BrandSize?
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("brands")
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  type        TaskType
  status      TaskStatus  @default(DRAFT)
  priority    Priority    @default(MEDIUM)
  budget      Float?
  deadline    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Brand and user relations
  brandId     String
  userId      String
  brand       Brand       @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Creative requirements
  requirements CreativeRequirements?
  
  // Deliverables and progress
  deliverables Deliverable[]
  comments      Comment[]
  updates       TaskUpdate[]

  @@map("tasks")
}

model CreativeRequirements {
  id          String   @id @default(cuid())
  taskId      String   @unique
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  // Content requirements
  contentType     String[] // ["static", "video", "animation", "illustration"]
  dimensions      String?  // "1920x1080", "1080x1080", etc.
  format          String[] // ["jpg", "png", "mp4", "gif", etc.]
  style           String?  // "minimalist", "bold", "corporate", etc.
  colorPalette    String[] // ["#FF0000", "#00FF00", etc.]
  mood            String?  // "professional", "playful", "serious", etc.
  
  // Brand guidelines
  brandGuidelines String?  @db.Text
  doNotUse        String?  @db.Text
  mustInclude      String?  @db.Text
  
  // Technical requirements
  fileSize        String?  // "under 5MB", "under 100MB", etc.
  resolution      String?  // "high-res", "web-optimized", etc.
  
  // References and inspiration
  references      String[] // URLs to reference images/videos
  inspiration     String?  @db.Text
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("creative_requirements")
}

model Deliverable {
  id          String            @id @default(cuid())
  taskId      String
  task        Task              @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  title       String
  description String?           @db.Text
  type        DeliverableType
  status      DeliverableStatus @default(PENDING)
  
  // File information
  fileName    String?
  fileUrl     String?
  fileSize    Int?
  mimeType    String?
  
  // Review and approval
  submittedAt DateTime?
  reviewedAt  DateTime?
  approvedAt  DateTime?
  rejectedAt  DateTime?
  feedback    String?           @db.Text
  
  // Version control
  version     Int               @default(1)
  isLatest    Boolean           @default(true)
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("deliverables")
}

model TaskUpdate {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  title     String
  content   String   @db.Text
  status    TaskStatus
  
  createdAt DateTime @default(now())

  @@map("task_updates")
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  content   String   @db.Text
  isInternal Boolean @default(false) // Internal team comments vs client comments
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      NotificationType
  title     String
  message   String           @db.Text
  isRead    Boolean          @default(false)
  
  // Optional link to related entity
  entityType String? // "task", "deliverable", etc.
  entityId   String?
  
  createdAt DateTime @default(now())

  @@map("notifications")
}

// Enums
enum UserRole {
  CLIENT
  ADMIN
  CREATIVE
}

enum BrandSize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum TaskType {
  STATIC_DESIGN
  VIDEO_PRODUCTION
  ANIMATION
  ILLUSTRATION
  BRANDING
  WEB_DESIGN
  OTHER
}

enum TaskStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  IN_PROGRESS
  READY_FOR_REVIEW
  REVISION_REQUESTED
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DeliverableType {
  STATIC_IMAGE
  VIDEO
  ANIMATION
  ILLUSTRATION
  LOGO
  BRAND_GUIDELINES
  OTHER
}

enum DeliverableStatus {
  PENDING
  IN_PROGRESS
  READY_FOR_REVIEW
  APPROVED
  REJECTED
  REVISION_REQUESTED
}

enum NotificationType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  DELIVERABLE_READY
  COMMENT_ADDED
  DEADLINE_APPROACHING
  TASK_APPROVED
  TASK_REJECTED
}
